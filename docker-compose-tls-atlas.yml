version: '3.6'

services:
   zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2182:2182"
      - "8080:8080"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zookeeper:22888:23888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SECURE_CLIENT_PORT: 2182
      ZOOKEEPER_AUTH_PROVIDER_X509: "org.apache.zookeeper.server.auth.X509AuthenticationProvider"
      ZOOKEEPER_SERVER_CNXN_FACTORY: "org.apache.zookeeper.server.NettyServerCnxnFactory"
      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /etc/zookeeper/secrets/kafka.zookeeper.truststore.jks
      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: $ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /etc/zookeeper/secrets/kafka.zookeeper.keystore.jks
      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: $ZOOKEEPER_SSL_KEYSTORE_PASSWORD
      ZOOKEEPER_SSL_CLIENT_AUTH: 'need'

    volumes:
       - $PWD/secrets/zookeeper:/etc/zookeeper/secrets

   broker1:
     image: confluentinc/cp-kafka:7.0.1
     hostname: broker1
     container_name: broker1
     depends_on:
       - zookeeper
     ports:
       - "19092:19092"
       - "19093:19093"
     environment:
       KAFKA_ADVERTISED_HOST_NAME: 192.168.1.106
       KAFKA_BROKER_ID: 1
       KAFKA_LISTENERS: PLAINTEXT://:19092,SSL://:19093
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:19092,SSL://broker1:19093
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL
       # Environment variables for SSL Zookeeper security between zookeeper and broker
       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2182'
       KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: "org.apache.zookeeper.ClientCnxnSocketNetty"
       KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: "true"
       KAFKA_ZOOKEEPER_SSL_PROTOCOL: TLSv1.3
       KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.broker.truststore.jks
       KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: $BROKER_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
       KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.broker.keystore.jks
       KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: $BROKER_ZOOKEEPER_SSL_KEYSTORE_PASSWORD
       KAFKA_ZOOKEEPER_SET_ACL: "true"
       # Environment variables for SSL Kafka security between broker and its clients
       KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
       KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
       KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
       KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
       KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
       KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.3
       KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
       KAFKA_SSL_CLIENT_AUTH: 'requested'
       KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,PLAINTEXT:PLAINTEXT
            
     volumes:
       - $PWD/secrets/broker1:/etc/kafka/secrets
       
   connect:
     image: confluentinc/cp-kafka-connect:7.0.1
     hostname: connect
     container_name: connect
     depends_on:
       - zookeeper
       - broker1
     ports:
       - "8083:8083"
     environment:
       CONNECT_BOOTSTRAP_SERVERS: broker1:19093
       CONNECT_REST_ADVERTISED_HOST_NAME: connect
       CONNECT_REST_PORT: 8083
       CONNECT_GROUP_ID: compose-connect-group
       CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
       CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
       CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
       CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter       
       CONNECT_PLUGIN_PATH:  /usr/share/confluent-hub-components
       CONNECT_LOG4J_ROOT_LOGLEVEL: "FATAL"
       CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=FATAL,org.reflections=FATAL,com.mongodb.kafka=FATAL"
       
       CONNECT_SECURITY_PROTOCOL: SSL
       CONNECT_SSL_TRUSTSTORE_LOCATION: /etc/kafka-connect/secrets/kafka.connect.truststore.jks
       CONNECT_SSL_TRUSTSTORE_PASSWORD: $CONNECT_SSL_TRUSTSTORE_PASSWORD
    
       CONNECT_SSL_KEYSTORE_LOCATION: /etc/kafka-connect/secrets/kafka.connect.keystore.jks
       CONNECT_SSL_KEYSTORE_PASSWORD: $CONNECT_SSL_KEYSTORE_PASSWORD

       CONNECT_CONSUMER_BOOTSTRAP_SERVERS: 'broker1:19093'
       CONNECT_CONSUMER_SECURITY_PROTOCOL: SSL
       CONNECT_CONSUMER_SSL_TRUSTSTORE_LOCATION: /etc/kafka-connect/secrets/kafka.connect.truststore.jks
       CONNECT_CONSUMER_SSL_TRUSTSTORE_PASSWORD: $CONNECT_SSL_TRUSTSTORE_PASSWORD
            
       CONNECT_PRODUCER_BOOTSTRAP_SERVERS: 'broker1:19093'
       CONNECT_PRODUCER_SECURITY_PROTOCOL: SSL
       CONNECT_PRODUCER_SSL_TRUSTSTORE_LOCATION: /etc/kafka-connect/secrets/kafka.connect.truststore.jks
       CONNECT_PRODUCER_SSL_TRUSTSTORE_PASSWORD: $CONNECT_SSL_TRUSTSTORE_PASSWORD
  
     volumes:
       - $PWD/mongodb-kafka-connect:/usr/share/confluent-hub-components/kafka-connect-mongodb
       - $PWD/kafka/scripts:/scripts
       - $PWD/secrets/connect:/etc/kafka-connect/secrets
     command:
       - bash
       - -c
       - |
         sleep 5
         echo "Launching Kafka Connect worker"
         /etc/confluent/docker/run &
         #
         echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME"
         while [ $$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors) -ne 200 ]; do
           echo -e $$(date) "Kafka Connect listener HTTP state: "$$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors)" (waiting for 200)"
           sleep 5 
         done
         nc -vz $$CONNECT_REST_ADVERTISED_HOST_NAME $$CONNECT_REST_PORT
         echo -e "\n--\n+> Creating Kafka Connect MongoDB sink"
         chmod 755 /scripts/sink-connect.sh
         /scripts/sink-connect.sh 
         sleep infinity
         
   producer:
     #image: librdkafka:1.7.0
     build: 
       context: ./librdkafka-producer/.
       dockerfile: Dockerfile
     depends_on:
       - zookeeper
       - broker1
       - connect
     hostname: producer
     container_name: producer
     privileged: true
     volumes:
       - $PWD/librdkafka-producer/conf/ld.so.conf:/etc/ld.so.conf
       - $PWD/librdkafka-producer/src:/opt/producer
       - /var/run/docker.sock:/host/var/run/docker.sock
       - /dev:/host/dev
       - /proc:/host/proc:ro
       - /boot:/host/boot:ro
       - /lib/modules:/host/lib/modules:ro
       - /usr:/host/usr:ro
       - $PWD/secrets/producer:/opt/producer/secrets
     working_dir: /opt/producer
     command:
       - bash
       - -c
       - |
         echo "Launching librdkafka producer"
         ldconfig
         /producer_entrypoint.sh &
         echo Waiting for kafka service start...;
         while [ $$(timeout 1 bash -c 'cat < /dev/null > /dev/tcp/broker1/19093' 2&>1; echo $$?) -ne 0 ];do
          sleep 1;
         done;
         echo Connected!;
         echo -e "\n--\n+> Starting kafka producer"
         /opt/producer/producer broker1:19093 sysdigtopic
         sleep infinity
         
  
   
